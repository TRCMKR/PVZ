// Code generated by MockGen. DO NOT EDIT.
// Source: router.go
//
// Generated by this command:
//
//	mockgen -typed -source=router.go -destination=./mock_storages_test.go -package=web
//

// Package web is a generated GoMock package.
package web

import (
	context "context"
	reflect "reflect"

	models "gitlab.ozon.dev/alexplay1224/homework/internal/models"
	query "gitlab.ozon.dev/alexplay1224/homework/internal/query"
	gomock "go.uber.org/mock/gomock"
)

// MockorderStorage is a mock of orderStorage interface.
type MockorderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockorderStorageMockRecorder
	isgomock struct{}
}

// MockorderStorageMockRecorder is the mock recorder for MockorderStorage.
type MockorderStorageMockRecorder struct {
	mock *MockorderStorage
}

// NewMockorderStorage creates a new mock instance.
func NewMockorderStorage(ctrl *gomock.Controller) *MockorderStorage {
	mock := &MockorderStorage{ctrl: ctrl}
	mock.recorder = &MockorderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderStorage) EXPECT() *MockorderStorageMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockorderStorage) AddOrder(arg0 context.Context, arg1 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockorderStorageMockRecorder) AddOrder(arg0, arg1 any) *MockorderStorageAddOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockorderStorage)(nil).AddOrder), arg0, arg1)
	return &MockorderStorageAddOrderCall{Call: call}
}

// MockorderStorageAddOrderCall wrap *gomock.Call
type MockorderStorageAddOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderStorageAddOrderCall) Return(arg0 error) *MockorderStorageAddOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderStorageAddOrderCall) Do(f func(context.Context, models.Order) error) *MockorderStorageAddOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderStorageAddOrderCall) DoAndReturn(f func(context.Context, models.Order) error) *MockorderStorageAddOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Contains mocks base method.
func (m *MockorderStorage) Contains(arg0 context.Context, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains.
func (mr *MockorderStorageMockRecorder) Contains(arg0, arg1 any) *MockorderStorageContainsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockorderStorage)(nil).Contains), arg0, arg1)
	return &MockorderStorageContainsCall{Call: call}
}

// MockorderStorageContainsCall wrap *gomock.Call
type MockorderStorageContainsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderStorageContainsCall) Return(arg0 bool, arg1 error) *MockorderStorageContainsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderStorageContainsCall) Do(f func(context.Context, int) (bool, error)) *MockorderStorageContainsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderStorageContainsCall) DoAndReturn(f func(context.Context, int) (bool, error)) *MockorderStorageContainsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockorderStorage) GetByID(arg0 context.Context, arg1 int) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockorderStorageMockRecorder) GetByID(arg0, arg1 any) *MockorderStorageGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockorderStorage)(nil).GetByID), arg0, arg1)
	return &MockorderStorageGetByIDCall{Call: call}
}

// MockorderStorageGetByIDCall wrap *gomock.Call
type MockorderStorageGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderStorageGetByIDCall) Return(arg0 models.Order, arg1 error) *MockorderStorageGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderStorageGetByIDCall) Do(f func(context.Context, int) (models.Order, error)) *MockorderStorageGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderStorageGetByIDCall) DoAndReturn(f func(context.Context, int) (models.Order, error)) *MockorderStorageGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByUserID mocks base method.
func (m *MockorderStorage) GetByUserID(arg0 context.Context, arg1, arg2 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockorderStorageMockRecorder) GetByUserID(arg0, arg1, arg2 any) *MockorderStorageGetByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockorderStorage)(nil).GetByUserID), arg0, arg1, arg2)
	return &MockorderStorageGetByUserIDCall{Call: call}
}

// MockorderStorageGetByUserIDCall wrap *gomock.Call
type MockorderStorageGetByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderStorageGetByUserIDCall) Return(arg0 []models.Order, arg1 error) *MockorderStorageGetByUserIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderStorageGetByUserIDCall) Do(f func(context.Context, int, int) ([]models.Order, error)) *MockorderStorageGetByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderStorageGetByUserIDCall) DoAndReturn(f func(context.Context, int, int) ([]models.Order, error)) *MockorderStorageGetByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrders mocks base method.
func (m *MockorderStorage) GetOrders(arg0 context.Context, arg1 []query.Cond, arg2, arg3 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockorderStorageMockRecorder) GetOrders(arg0, arg1, arg2, arg3 any) *MockorderStorageGetOrdersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockorderStorage)(nil).GetOrders), arg0, arg1, arg2, arg3)
	return &MockorderStorageGetOrdersCall{Call: call}
}

// MockorderStorageGetOrdersCall wrap *gomock.Call
type MockorderStorageGetOrdersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderStorageGetOrdersCall) Return(arg0 []models.Order, arg1 error) *MockorderStorageGetOrdersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderStorageGetOrdersCall) Do(f func(context.Context, []query.Cond, int, int) ([]models.Order, error)) *MockorderStorageGetOrdersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderStorageGetOrdersCall) DoAndReturn(f func(context.Context, []query.Cond, int, int) ([]models.Order, error)) *MockorderStorageGetOrdersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetReturns mocks base method.
func (m *MockorderStorage) GetReturns(arg0 context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReturns", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReturns indicates an expected call of GetReturns.
func (mr *MockorderStorageMockRecorder) GetReturns(arg0 any) *MockorderStorageGetReturnsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReturns", reflect.TypeOf((*MockorderStorage)(nil).GetReturns), arg0)
	return &MockorderStorageGetReturnsCall{Call: call}
}

// MockorderStorageGetReturnsCall wrap *gomock.Call
type MockorderStorageGetReturnsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderStorageGetReturnsCall) Return(arg0 []models.Order, arg1 error) *MockorderStorageGetReturnsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderStorageGetReturnsCall) Do(f func(context.Context) ([]models.Order, error)) *MockorderStorageGetReturnsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderStorageGetReturnsCall) DoAndReturn(f func(context.Context) ([]models.Order, error)) *MockorderStorageGetReturnsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveOrder mocks base method.
func (m *MockorderStorage) RemoveOrder(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOrder indicates an expected call of RemoveOrder.
func (mr *MockorderStorageMockRecorder) RemoveOrder(arg0, arg1 any) *MockorderStorageRemoveOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrder", reflect.TypeOf((*MockorderStorage)(nil).RemoveOrder), arg0, arg1)
	return &MockorderStorageRemoveOrderCall{Call: call}
}

// MockorderStorageRemoveOrderCall wrap *gomock.Call
type MockorderStorageRemoveOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderStorageRemoveOrderCall) Return(arg0 error) *MockorderStorageRemoveOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderStorageRemoveOrderCall) Do(f func(context.Context, int) error) *MockorderStorageRemoveOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderStorageRemoveOrderCall) DoAndReturn(f func(context.Context, int) error) *MockorderStorageRemoveOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOrder mocks base method.
func (m *MockorderStorage) UpdateOrder(arg0 context.Context, arg1 int, arg2 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockorderStorageMockRecorder) UpdateOrder(arg0, arg1, arg2 any) *MockorderStorageUpdateOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockorderStorage)(nil).UpdateOrder), arg0, arg1, arg2)
	return &MockorderStorageUpdateOrderCall{Call: call}
}

// MockorderStorageUpdateOrderCall wrap *gomock.Call
type MockorderStorageUpdateOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderStorageUpdateOrderCall) Return(arg0 error) *MockorderStorageUpdateOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderStorageUpdateOrderCall) Do(f func(context.Context, int, models.Order) error) *MockorderStorageUpdateOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderStorageUpdateOrderCall) DoAndReturn(f func(context.Context, int, models.Order) error) *MockorderStorageUpdateOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockadminStorage is a mock of adminStorage interface.
type MockadminStorage struct {
	ctrl     *gomock.Controller
	recorder *MockadminStorageMockRecorder
	isgomock struct{}
}

// MockadminStorageMockRecorder is the mock recorder for MockadminStorage.
type MockadminStorageMockRecorder struct {
	mock *MockadminStorage
}

// NewMockadminStorage creates a new mock instance.
func NewMockadminStorage(ctrl *gomock.Controller) *MockadminStorage {
	mock := &MockadminStorage{ctrl: ctrl}
	mock.recorder = &MockadminStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockadminStorage) EXPECT() *MockadminStorageMockRecorder {
	return m.recorder
}

// ContainsID mocks base method.
func (m *MockadminStorage) ContainsID(arg0 context.Context, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsID", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsID indicates an expected call of ContainsID.
func (mr *MockadminStorageMockRecorder) ContainsID(arg0, arg1 any) *MockadminStorageContainsIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsID", reflect.TypeOf((*MockadminStorage)(nil).ContainsID), arg0, arg1)
	return &MockadminStorageContainsIDCall{Call: call}
}

// MockadminStorageContainsIDCall wrap *gomock.Call
type MockadminStorageContainsIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminStorageContainsIDCall) Return(arg0 bool, arg1 error) *MockadminStorageContainsIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminStorageContainsIDCall) Do(f func(context.Context, int) (bool, error)) *MockadminStorageContainsIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminStorageContainsIDCall) DoAndReturn(f func(context.Context, int) (bool, error)) *MockadminStorageContainsIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainsUsername mocks base method.
func (m *MockadminStorage) ContainsUsername(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsUsername", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsUsername indicates an expected call of ContainsUsername.
func (mr *MockadminStorageMockRecorder) ContainsUsername(arg0, arg1 any) *MockadminStorageContainsUsernameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsUsername", reflect.TypeOf((*MockadminStorage)(nil).ContainsUsername), arg0, arg1)
	return &MockadminStorageContainsUsernameCall{Call: call}
}

// MockadminStorageContainsUsernameCall wrap *gomock.Call
type MockadminStorageContainsUsernameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminStorageContainsUsernameCall) Return(arg0 bool, arg1 error) *MockadminStorageContainsUsernameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminStorageContainsUsernameCall) Do(f func(context.Context, string) (bool, error)) *MockadminStorageContainsUsernameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminStorageContainsUsernameCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockadminStorageContainsUsernameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateAdmin mocks base method.
func (m *MockadminStorage) CreateAdmin(arg0 context.Context, arg1 models.Admin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockadminStorageMockRecorder) CreateAdmin(arg0, arg1 any) *MockadminStorageCreateAdminCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockadminStorage)(nil).CreateAdmin), arg0, arg1)
	return &MockadminStorageCreateAdminCall{Call: call}
}

// MockadminStorageCreateAdminCall wrap *gomock.Call
type MockadminStorageCreateAdminCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminStorageCreateAdminCall) Return(arg0 error) *MockadminStorageCreateAdminCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminStorageCreateAdminCall) Do(f func(context.Context, models.Admin) error) *MockadminStorageCreateAdminCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminStorageCreateAdminCall) DoAndReturn(f func(context.Context, models.Admin) error) *MockadminStorageCreateAdminCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAdmin mocks base method.
func (m *MockadminStorage) DeleteAdmin(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockadminStorageMockRecorder) DeleteAdmin(arg0, arg1 any) *MockadminStorageDeleteAdminCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockadminStorage)(nil).DeleteAdmin), arg0, arg1)
	return &MockadminStorageDeleteAdminCall{Call: call}
}

// MockadminStorageDeleteAdminCall wrap *gomock.Call
type MockadminStorageDeleteAdminCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminStorageDeleteAdminCall) Return(arg0 error) *MockadminStorageDeleteAdminCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminStorageDeleteAdminCall) Do(f func(context.Context, string) error) *MockadminStorageDeleteAdminCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminStorageDeleteAdminCall) DoAndReturn(f func(context.Context, string) error) *MockadminStorageDeleteAdminCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAdminByUsername mocks base method.
func (m *MockadminStorage) GetAdminByUsername(arg0 context.Context, arg1 string) (models.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByUsername", arg0, arg1)
	ret0, _ := ret[0].(models.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByUsername indicates an expected call of GetAdminByUsername.
func (mr *MockadminStorageMockRecorder) GetAdminByUsername(arg0, arg1 any) *MockadminStorageGetAdminByUsernameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByUsername", reflect.TypeOf((*MockadminStorage)(nil).GetAdminByUsername), arg0, arg1)
	return &MockadminStorageGetAdminByUsernameCall{Call: call}
}

// MockadminStorageGetAdminByUsernameCall wrap *gomock.Call
type MockadminStorageGetAdminByUsernameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminStorageGetAdminByUsernameCall) Return(arg0 models.Admin, arg1 error) *MockadminStorageGetAdminByUsernameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminStorageGetAdminByUsernameCall) Do(f func(context.Context, string) (models.Admin, error)) *MockadminStorageGetAdminByUsernameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminStorageGetAdminByUsernameCall) DoAndReturn(f func(context.Context, string) (models.Admin, error)) *MockadminStorageGetAdminByUsernameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAdmin mocks base method.
func (m *MockadminStorage) UpdateAdmin(arg0 context.Context, arg1 int, arg2 models.Admin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdmin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdmin indicates an expected call of UpdateAdmin.
func (mr *MockadminStorageMockRecorder) UpdateAdmin(arg0, arg1, arg2 any) *MockadminStorageUpdateAdminCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdmin", reflect.TypeOf((*MockadminStorage)(nil).UpdateAdmin), arg0, arg1, arg2)
	return &MockadminStorageUpdateAdminCall{Call: call}
}

// MockadminStorageUpdateAdminCall wrap *gomock.Call
type MockadminStorageUpdateAdminCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminStorageUpdateAdminCall) Return(arg0 error) *MockadminStorageUpdateAdminCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminStorageUpdateAdminCall) Do(f func(context.Context, int, models.Admin) error) *MockadminStorageUpdateAdminCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminStorageUpdateAdminCall) DoAndReturn(f func(context.Context, int, models.Admin) error) *MockadminStorageUpdateAdminCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
