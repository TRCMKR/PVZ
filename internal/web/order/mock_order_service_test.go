// Code generated by MockGen. DO NOT EDIT.
// Source: order.go
//
// Generated by this command:
//
//	mockgen -typed -source=order.go -destination=./mock_order_service_test.go -package=order
//

// Package order is a generated GoMock package.
package order

import (
	context "context"
	reflect "reflect"
	time "time"

	money "github.com/Rhymond/go-money"
	models "gitlab.ozon.dev/alexplay1224/homework/internal/models"
	query "gitlab.ozon.dev/alexplay1224/homework/internal/query"
	gomock "go.uber.org/mock/gomock"
)

// MockorderService is a mock of orderService interface.
type MockorderService struct {
	ctrl     *gomock.Controller
	recorder *MockorderServiceMockRecorder
	isgomock struct{}
}

// MockorderServiceMockRecorder is the mock recorder for MockorderService.
type MockorderServiceMockRecorder struct {
	mock *MockorderService
}

// NewMockorderService creates a new mock instance.
func NewMockorderService(ctrl *gomock.Controller) *MockorderService {
	mock := &MockorderService{ctrl: ctrl}
	mock.recorder = &MockorderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderService) EXPECT() *MockorderServiceMockRecorder {
	return m.recorder
}

// AcceptOrder mocks base method.
func (m *MockorderService) AcceptOrder(arg0 context.Context, arg1, arg2 int, arg3 float64, arg4 money.Money, arg5 time.Time, arg6 []models.Packaging) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptOrder", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptOrder indicates an expected call of AcceptOrder.
func (mr *MockorderServiceMockRecorder) AcceptOrder(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockorderServiceAcceptOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptOrder", reflect.TypeOf((*MockorderService)(nil).AcceptOrder), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockorderServiceAcceptOrderCall{Call: call}
}

// MockorderServiceAcceptOrderCall wrap *gomock.Call
type MockorderServiceAcceptOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceAcceptOrderCall) Return(arg0 error) *MockorderServiceAcceptOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceAcceptOrderCall) Do(f func(context.Context, int, int, float64, money.Money, time.Time, []models.Packaging) error) *MockorderServiceAcceptOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceAcceptOrderCall) DoAndReturn(f func(context.Context, int, int, float64, money.Money, time.Time, []models.Packaging) error) *MockorderServiceAcceptOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AcceptOrders mocks base method.
func (m *MockorderService) AcceptOrders(arg0 context.Context, arg1 map[string]models.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptOrders", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptOrders indicates an expected call of AcceptOrders.
func (mr *MockorderServiceMockRecorder) AcceptOrders(arg0, arg1 any) *MockorderServiceAcceptOrdersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptOrders", reflect.TypeOf((*MockorderService)(nil).AcceptOrders), arg0, arg1)
	return &MockorderServiceAcceptOrdersCall{Call: call}
}

// MockorderServiceAcceptOrdersCall wrap *gomock.Call
type MockorderServiceAcceptOrdersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceAcceptOrdersCall) Return(arg0 int, arg1 error) *MockorderServiceAcceptOrdersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceAcceptOrdersCall) Do(f func(context.Context, map[string]models.Order) (int, error)) *MockorderServiceAcceptOrdersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceAcceptOrdersCall) DoAndReturn(f func(context.Context, map[string]models.Order) (int, error)) *MockorderServiceAcceptOrdersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrders mocks base method.
func (m *MockorderService) GetOrders(arg0 context.Context, arg1 []query.Cond, arg2, arg3 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockorderServiceMockRecorder) GetOrders(arg0, arg1, arg2, arg3 any) *MockorderServiceGetOrdersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockorderService)(nil).GetOrders), arg0, arg1, arg2, arg3)
	return &MockorderServiceGetOrdersCall{Call: call}
}

// MockorderServiceGetOrdersCall wrap *gomock.Call
type MockorderServiceGetOrdersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceGetOrdersCall) Return(arg0 []models.Order, arg1 error) *MockorderServiceGetOrdersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceGetOrdersCall) Do(f func(context.Context, []query.Cond, int, int) ([]models.Order, error)) *MockorderServiceGetOrdersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceGetOrdersCall) DoAndReturn(f func(context.Context, []query.Cond, int, int) ([]models.Order, error)) *MockorderServiceGetOrdersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProcessOrder mocks base method.
func (m *MockorderService) ProcessOrder(arg0 context.Context, arg1, arg2 int, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockorderServiceMockRecorder) ProcessOrder(arg0, arg1, arg2, arg3 any) *MockorderServiceProcessOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockorderService)(nil).ProcessOrder), arg0, arg1, arg2, arg3)
	return &MockorderServiceProcessOrderCall{Call: call}
}

// MockorderServiceProcessOrderCall wrap *gomock.Call
type MockorderServiceProcessOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceProcessOrderCall) Return(arg0 error) *MockorderServiceProcessOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceProcessOrderCall) Do(f func(context.Context, int, int, string) error) *MockorderServiceProcessOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceProcessOrderCall) DoAndReturn(f func(context.Context, int, int, string) error) *MockorderServiceProcessOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReturnOrder mocks base method.
func (m *MockorderService) ReturnOrder(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockorderServiceMockRecorder) ReturnOrder(arg0, arg1 any) *MockorderServiceReturnOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockorderService)(nil).ReturnOrder), arg0, arg1)
	return &MockorderServiceReturnOrderCall{Call: call}
}

// MockorderServiceReturnOrderCall wrap *gomock.Call
type MockorderServiceReturnOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceReturnOrderCall) Return(arg0 error) *MockorderServiceReturnOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceReturnOrderCall) Do(f func(context.Context, int) error) *MockorderServiceReturnOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceReturnOrderCall) DoAndReturn(f func(context.Context, int) error) *MockorderServiceReturnOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Returns mocks base method.
func (m *MockorderService) Returns(arg0 context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Returns", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Returns indicates an expected call of Returns.
func (mr *MockorderServiceMockRecorder) Returns(arg0 any) *MockorderServiceReturnsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returns", reflect.TypeOf((*MockorderService)(nil).Returns), arg0)
	return &MockorderServiceReturnsCall{Call: call}
}

// MockorderServiceReturnsCall wrap *gomock.Call
type MockorderServiceReturnsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceReturnsCall) Return(arg0 []models.Order, arg1 error) *MockorderServiceReturnsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceReturnsCall) Do(f func(context.Context) ([]models.Order, error)) *MockorderServiceReturnsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceReturnsCall) DoAndReturn(f func(context.Context) ([]models.Order, error)) *MockorderServiceReturnsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UserOrders mocks base method.
func (m *MockorderService) UserOrders(arg0 context.Context, arg1, arg2 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOrders indicates an expected call of UserOrders.
func (mr *MockorderServiceMockRecorder) UserOrders(arg0, arg1, arg2 any) *MockorderServiceUserOrdersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrders", reflect.TypeOf((*MockorderService)(nil).UserOrders), arg0, arg1, arg2)
	return &MockorderServiceUserOrdersCall{Call: call}
}

// MockorderServiceUserOrdersCall wrap *gomock.Call
type MockorderServiceUserOrdersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceUserOrdersCall) Return(arg0 []models.Order, arg1 error) *MockorderServiceUserOrdersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceUserOrdersCall) Do(f func(context.Context, int, int) ([]models.Order, error)) *MockorderServiceUserOrdersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceUserOrdersCall) DoAndReturn(f func(context.Context, int, int) ([]models.Order, error)) *MockorderServiceUserOrdersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
