// Code generated by MockGen. DO NOT EDIT.
// Source: admin.go
//
// Generated by this command:
//
//	mockgen -typed -source=admin.go -destination=mock_adminService_test.go -package=admin
//

// Package admin is a generated GoMock package.
package admin

import (
	context "context"
	reflect "reflect"

	models "gitlab.ozon.dev/alexplay1224/homework/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockadminService is a mock of adminService interface.
type MockadminService struct {
	ctrl     *gomock.Controller
	recorder *MockadminServiceMockRecorder
	isgomock struct{}
}

// MockadminServiceMockRecorder is the mock recorder for MockadminService.
type MockadminServiceMockRecorder struct {
	mock *MockadminService
}

// NewMockadminService creates a new mock instance.
func NewMockadminService(ctrl *gomock.Controller) *MockadminService {
	mock := &MockadminService{ctrl: ctrl}
	mock.recorder = &MockadminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockadminService) EXPECT() *MockadminServiceMockRecorder {
	return m.recorder
}

// ContainsID mocks base method.
func (m *MockadminService) ContainsID(arg0 context.Context, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsID", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsID indicates an expected call of ContainsID.
func (mr *MockadminServiceMockRecorder) ContainsID(arg0, arg1 any) *MockadminServiceContainsIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsID", reflect.TypeOf((*MockadminService)(nil).ContainsID), arg0, arg1)
	return &MockadminServiceContainsIDCall{Call: call}
}

// MockadminServiceContainsIDCall wrap *gomock.Call
type MockadminServiceContainsIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminServiceContainsIDCall) Return(arg0 bool, arg1 error) *MockadminServiceContainsIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminServiceContainsIDCall) Do(f func(context.Context, int) (bool, error)) *MockadminServiceContainsIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminServiceContainsIDCall) DoAndReturn(f func(context.Context, int) (bool, error)) *MockadminServiceContainsIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainsUsername mocks base method.
func (m *MockadminService) ContainsUsername(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsUsername", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsUsername indicates an expected call of ContainsUsername.
func (mr *MockadminServiceMockRecorder) ContainsUsername(arg0, arg1 any) *MockadminServiceContainsUsernameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsUsername", reflect.TypeOf((*MockadminService)(nil).ContainsUsername), arg0, arg1)
	return &MockadminServiceContainsUsernameCall{Call: call}
}

// MockadminServiceContainsUsernameCall wrap *gomock.Call
type MockadminServiceContainsUsernameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminServiceContainsUsernameCall) Return(arg0 bool, arg1 error) *MockadminServiceContainsUsernameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminServiceContainsUsernameCall) Do(f func(context.Context, string) (bool, error)) *MockadminServiceContainsUsernameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminServiceContainsUsernameCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockadminServiceContainsUsernameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateAdmin mocks base method.
func (m *MockadminService) CreateAdmin(arg0 context.Context, arg1 models.Admin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockadminServiceMockRecorder) CreateAdmin(arg0, arg1 any) *MockadminServiceCreateAdminCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockadminService)(nil).CreateAdmin), arg0, arg1)
	return &MockadminServiceCreateAdminCall{Call: call}
}

// MockadminServiceCreateAdminCall wrap *gomock.Call
type MockadminServiceCreateAdminCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminServiceCreateAdminCall) Return(arg0 error) *MockadminServiceCreateAdminCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminServiceCreateAdminCall) Do(f func(context.Context, models.Admin) error) *MockadminServiceCreateAdminCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminServiceCreateAdminCall) DoAndReturn(f func(context.Context, models.Admin) error) *MockadminServiceCreateAdminCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAdmin mocks base method.
func (m *MockadminService) DeleteAdmin(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockadminServiceMockRecorder) DeleteAdmin(arg0, arg1, arg2 any) *MockadminServiceDeleteAdminCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockadminService)(nil).DeleteAdmin), arg0, arg1, arg2)
	return &MockadminServiceDeleteAdminCall{Call: call}
}

// MockadminServiceDeleteAdminCall wrap *gomock.Call
type MockadminServiceDeleteAdminCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminServiceDeleteAdminCall) Return(arg0 error) *MockadminServiceDeleteAdminCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminServiceDeleteAdminCall) Do(f func(context.Context, string, string) error) *MockadminServiceDeleteAdminCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminServiceDeleteAdminCall) DoAndReturn(f func(context.Context, string, string) error) *MockadminServiceDeleteAdminCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAdminByUsername mocks base method.
func (m *MockadminService) GetAdminByUsername(arg0 context.Context, arg1 string) (models.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByUsername", arg0, arg1)
	ret0, _ := ret[0].(models.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByUsername indicates an expected call of GetAdminByUsername.
func (mr *MockadminServiceMockRecorder) GetAdminByUsername(arg0, arg1 any) *MockadminServiceGetAdminByUsernameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByUsername", reflect.TypeOf((*MockadminService)(nil).GetAdminByUsername), arg0, arg1)
	return &MockadminServiceGetAdminByUsernameCall{Call: call}
}

// MockadminServiceGetAdminByUsernameCall wrap *gomock.Call
type MockadminServiceGetAdminByUsernameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminServiceGetAdminByUsernameCall) Return(arg0 models.Admin, arg1 error) *MockadminServiceGetAdminByUsernameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminServiceGetAdminByUsernameCall) Do(f func(context.Context, string) (models.Admin, error)) *MockadminServiceGetAdminByUsernameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminServiceGetAdminByUsernameCall) DoAndReturn(f func(context.Context, string) (models.Admin, error)) *MockadminServiceGetAdminByUsernameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAdmin mocks base method.
func (m *MockadminService) UpdateAdmin(arg0 context.Context, arg1, arg2 string, arg3 models.Admin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdmin", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdmin indicates an expected call of UpdateAdmin.
func (mr *MockadminServiceMockRecorder) UpdateAdmin(arg0, arg1, arg2, arg3 any) *MockadminServiceUpdateAdminCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdmin", reflect.TypeOf((*MockadminService)(nil).UpdateAdmin), arg0, arg1, arg2, arg3)
	return &MockadminServiceUpdateAdminCall{Call: call}
}

// MockadminServiceUpdateAdminCall wrap *gomock.Call
type MockadminServiceUpdateAdminCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockadminServiceUpdateAdminCall) Return(arg0 error) *MockadminServiceUpdateAdminCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockadminServiceUpdateAdminCall) Do(f func(context.Context, string, string, models.Admin) error) *MockadminServiceUpdateAdminCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockadminServiceUpdateAdminCall) DoAndReturn(f func(context.Context, string, string, models.Admin) error) *MockadminServiceUpdateAdminCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
