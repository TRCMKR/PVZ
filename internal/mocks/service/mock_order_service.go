// Code generated by MockGen. DO NOT EDIT.
// Source: order_handler.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	money "github.com/Rhymond/go-money"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/alexplay1224/homework/internal/models"
	query "gitlab.ozon.dev/alexplay1224/homework/internal/query"
)

// MockorderService is a mock of orderService interface.
type MockorderService struct {
	ctrl     *gomock.Controller
	recorder *MockorderServiceMockRecorder
}

// MockorderServiceMockRecorder is the mock recorder for MockorderService.
type MockorderServiceMockRecorder struct {
	mock *MockorderService
}

// NewMockorderService creates a new mock instance.
func NewMockorderService(ctrl *gomock.Controller) *MockorderService {
	mock := &MockorderService{ctrl: ctrl}
	mock.recorder = &MockorderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderService) EXPECT() *MockorderServiceMockRecorder {
	return m.recorder
}

// AcceptOrder mocks base method.
func (m *MockorderService) AcceptOrder(arg0 context.Context, arg1, arg2 int, arg3 float64, arg4 money.Money, arg5 time.Time, arg6 []models.Packaging) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptOrder", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptOrder indicates an expected call of AcceptOrder.
func (mr *MockorderServiceMockRecorder) AcceptOrder(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptOrder", reflect.TypeOf((*MockorderService)(nil).AcceptOrder), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AcceptOrders mocks base method.
func (m *MockorderService) AcceptOrders(arg0 context.Context, arg1 map[string]models.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptOrders", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptOrders indicates an expected call of AcceptOrders.
func (mr *MockorderServiceMockRecorder) AcceptOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptOrders", reflect.TypeOf((*MockorderService)(nil).AcceptOrders), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockorderService) GetOrders(arg0 context.Context, arg1 []query.Cond, arg2, arg3 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockorderServiceMockRecorder) GetOrders(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockorderService)(nil).GetOrders), arg0, arg1, arg2, arg3)
}

// ProcessOrders mocks base method.
func (m *MockorderService) ProcessOrders(arg0 context.Context, arg1 int, arg2 []int, arg3 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrders", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessOrders indicates an expected call of ProcessOrders.
func (mr *MockorderServiceMockRecorder) ProcessOrders(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrders", reflect.TypeOf((*MockorderService)(nil).ProcessOrders), arg0, arg1, arg2, arg3)
}

// ReturnOrder mocks base method.
func (m *MockorderService) ReturnOrder(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockorderServiceMockRecorder) ReturnOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockorderService)(nil).ReturnOrder), arg0, arg1)
}

// Returns mocks base method.
func (m *MockorderService) Returns(arg0 context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Returns", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Returns indicates an expected call of Returns.
func (mr *MockorderServiceMockRecorder) Returns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returns", reflect.TypeOf((*MockorderService)(nil).Returns), arg0)
}

// UserOrders mocks base method.
func (m *MockorderService) UserOrders(arg0 context.Context, arg1, arg2 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOrders indicates an expected call of UserOrders.
func (mr *MockorderServiceMockRecorder) UserOrders(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrders", reflect.TypeOf((*MockorderService)(nil).UserOrders), arg0, arg1, arg2)
}
